const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { User } = require("../models");

// üîê G√©n√©rer un token s√©curis√© avec une cl√© secr√®te
const generateToken = (user) => {
    return jwt.sign(
        { id: user.id, role: user.role },
        process.env.JWT_SECRET,  // V√©rifie que cette cl√© est bien d√©finie dans .env
        { expiresIn: "1h" } // ‚è≥ Expiration en 1h
    );
};

// ‚úÖ Inscription (avec v√©rification des emails d√©j√† utilis√©s)
exports.register = async (req, res) => {
    const { firstName, lastName, email, password, role } = req.body;

    try {
        const existingUser = await User.findOne({ where: { email } });
        if (existingUser) {
            return res.status(400).json({ error: "Cet email est d√©j√† utilis√©." });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const user = await User.create({ firstName, lastName, email, password: hashedPassword, role });

        res.status(201).json({ message: "Utilisateur cr√©√© avec succ√®s", user });
    } catch (error) {
        res.status(500).json({ error: "Erreur lors de l'inscription", details: error.message });
    }
};

// ‚úÖ Connexion (avec hachage du mot de passe)
exports.login = async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ where: { email } });

        if (!user) {
            return res.status(404).json({ error: "Utilisateur introuvable" });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ error: "Mot de passe incorrect" });
        }

        const token = generateToken(user);
        await user.update({ token }); // Stocke le token en BDD

        res.status(200).json({ message: "Connexion r√©ussie", token, user });
    } catch (error) {
        console.error("‚ùå Erreur de connexion:", error);
        res.status(500).json({ error: "Erreur lors de la connexion", details: error.message });
    }
};

// ‚úÖ R√©cup√©ration de l'utilisateur connect√©
exports.me = async (req, res) => {
    if (!req.user || !req.user.id) {
        return res.status(401).json({ error: "Utilisateur non authentifi√©." });
    }

    try {
        const user = await User.findOne({ where: { id: req.user.id } });

        if (!user) {
            return res.status(404).json({ error: "Utilisateur introuvable." });
        }

        res.status(200).json(user);
    } catch (error) {
        res.status(500).json({ error: "Erreur lors de la r√©cup√©ration des donn√©es utilisateur.", details: error.message });
    }
};

// ÔøΩÔøΩ D√©connexion
exports.logout = async (req, res) => {
    try {
        const user = await User.findOne({ where: { id: req.user.id } });
        if (!user) {
            return res.status(404).json({ error: "Utilisateur introuvable." });
        }
        await user.update({ token: null }); // Supprime le token en BDD
        res.status(200).json({ message: "D√©connexion r√©ussie." });
    } catch (error) {
        res.status(500).json({ error: "Erreur lors de la d√©connexion", details: error.message });
    }
};